#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script for merging PAF files coming from the alignment of ONT 16S sequences
to GreenGenes Database. 

Result: summary (OTU table-like) of reads assigned to each TaxID in each
sample.

@author: Adriel Latorre-PÃ©rez
@company: Darwin Bioprospecting Excellence S.L.
@date: 15/10/2020
"""

import sys, os
from argparse import ArgumentParser # Para gestionar argumentos

def Arguments():
    """For input folder.
    """
    parser = ArgumentParser (description ="Script for merging PAF files coming\
                            from the alignment of ONT 16S sequences to \
                            GreenGenes Database. \
                            Result: summary (OTU table-like) of reads assigned\
                             to each TaxID in each sample.")
    parser.add_argument ('-i', '--input', dest='dir',
                           action ='store', required =True ,
                           help='Path to dir containing PAF files')
    
    # Procesa los argumentos
    try:
        args = parser.parse_args ()
        return args
    except:
        print('Please, include the required arguments.')
        sys.exit()
    # end try
    
            
def taxReader(pafRoutes):
    """
    Given a directory of PAF files, it reads the files and creates a dictionary
    with all the taxIDs detected.

    Parameters
    ----------
    pafRoutes : STRING
        PATH to PAF folder.

    Returns
    -------
    A dictionary:
        
        Key: taxID
        Value: list of 0s. Length list = number of PAF files in the directory

    """ 
    taxDic = {}
    
    for file in pafRoutes:
        file = open(file)
        for line in file:
            taxID = line.strip().split("\t")[5]
            if taxID not in taxDic:
                taxDic[taxID] = [0] * len(pafRoutes)   
        file.close()
    
    return taxDic


def taxSummary(pafRoutes, taxDic):
    """
    Given the path to the PAF files and the dictionary generated by taxReader,
    taxSummary generates a summary of the number of hits for each taxID in
    each sample

    Parameters
    ----------
    pafRoutes : STRING
        PATH to PAF folder.
    taxDic : DICTIONARY
        Output of taxSummary.

    Returns
    -------
    Updated dic.

    """
    n = 0 # index variable
    for file in pafRoutes:
        file = open(file)
        for line in file:
            taxID = line.strip().split("\t")[5]
            taxDic[taxID][n] += 1
        n += 1
        file.close()
        
    return taxDic


def PAFmerger(dir):
    """
    Function for merging and summarizing diferent PAF files coming from align-
    ing 16S files (different barcodes) to a Database with minimap

    Parameters
    ----------
    dir : STRING
        Path to the folder containing the PAF files.

    Returns
    -------
    A dictionary to be formatted for final output.

    """
    if dir[-1] != "/":
        dir += "/"
    
    files = []
    header = ["#OTU ID"]
    for file in os.listdir(dir):
        if ".paf" in file:
            files.append(dir + file)
            header.append(file.split(".paf")[0])
            
    taxDic = taxReader(files)
    
    return header, taxSummary(files, taxDic)


def summaryTable(header, taxDic):
    """
    Function for convert the output of PAFmerger into a OTU table-like CSV
    file.

    Parameters
    ----------
    header : LIST
        1st output from PAFmerger.
    taxDic : DICTIONARY
        2nd output from PAFmerger.

    Returns
    -------
    None. Prints the table to stdout.

    """
    print (",".join(header))
    
    for taxID in taxDic:
        print (taxID + ',' + ','.join([str(elem) for elem in taxDic[taxID]]))


if __name__ == "__main__":
   args = Arguments()
   header, taxDic = PAFmerger (args.dir)
   summaryTable(header, taxDic)